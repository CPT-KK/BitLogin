name: BitLogin Release

on:
  release:
    types:
      - created

env:
  VCPKG_ROOT: C:/vcpkg
  artifact_name: BitLogin

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-12, macos-14]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            install-cmd: echo "No dependencies to install on Windows."
            build_path_prefix: Release/
            artifact_name: BitLogin
            artifact_suffix: .exe
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
            install-cmd: sudo apt-get update && sudo apt-get install -y libssl-dev libfmt-dev
            build_path_prefix: ""
            artifact_name: BitLogin
            artifact_suffix: ""
          - os: macos-12
            c_compiler: gcc
            cpp_compiler: g++
            install-cmd: brew install fmt openssl
            build_path_prefix: ""
            artifact_name: BitLogin
            artifact_suffix: ""
          - os: macos-14
            c_compiler: gcc
            cpp_compiler: g++
            install-cmd: brew install fmt openssl
            build_path_prefix: ""
            artifact_name: BitLogin
            artifact_suffix: ""

    steps:
    - uses: actions/checkout@v3

    - name: Set CMake version
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.29.0'

    - name: Install dependency
      run: ${{ matrix.install-cmd }}

    - name: CMake Configure (Ubuntu and macOS)
      if: matrix.os != 'windows-latest'
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE
        -S ${{ github.workspace }}
    
    - name: CMake Configure (Windows)
      if: matrix.os == 'windows-latest'
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=x64-windows-static
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: CMake Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Set output name
      id: strings
      shell: bash
      run: |
        artifact_name_raw=`cat ${{ github.workspace }}/build/execname`
        echo "The artifact will be named ${artifact_name_raw,,}"
        echo "artifact_name_full=${artifact_name_raw,,}" >> "$GITHUB_OUTPUT"

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        asset_name: ${{ steps.strings.outputs.artifact_name_full }}${{ matrix.artifact_suffix }}
        file: ${{ github.workspace }}/build/${{ matrix.build_path_prefix }}${{ matrix.artifact_name }}${{ matrix.artifact_suffix }}
        tag: ${{ github.ref }}
        overwrite: true

